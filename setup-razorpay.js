#!/usr/bin/env node

/**
 * Interactive setup script for Razorpay integration
 * Run with: node setup-razorpay.js
 */

const fs = require('fs');
const path = require('path');
const readline = require('readline');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

function question(query) {
  return new Promise(resolve => rl.question(query, resolve));
}

async function setupRazorpay() {
  console.log('🚀 Razorpay Integration Setup\n');
  console.log('This script will help you configure Razorpay for your application.\n');
  
  console.log('📋 Prerequisites:');
  console.log('1. Razorpay account (sign up at https://razorpay.com)');
  console.log('2. API keys from Razorpay dashboard\n');
  
  const proceed = await question('Do you have your Razorpay API keys ready? (y/n): ');
  
  if (proceed.toLowerCase() !== 'y') {
    console.log('\n📖 To get your API keys:');
    console.log('1. Go to https://dashboard.razorpay.com/app/keys');
    console.log('2. Generate Test API Keys');
    console.log('3. Copy both Key ID and Key Secret');
    console.log('4. Run this script again\n');
    rl.close();
    return;
  }
  
  console.log('\n🔑 Enter your Razorpay credentials:');
  
  const keyId = await question('Razorpay Key ID (starts with rzp_test_ or rzp_live_): ');
  const keySecret = await question('Razorpay Key Secret: ');
  
  // Validate key format
  if (!keyId.startsWith('rzp_test_') && !keyId.startsWith('rzp_live_')) {
    console.log('❌ Invalid Key ID format. Should start with rzp_test_ or rzp_live_');
    rl.close();
    return;
  }
  
  if (!keySecret || keySecret.length < 10) {
    console.log('❌ Invalid Key Secret. Please check and try again.');
    rl.close();
    return;
  }
  
  // Create .env.local content
  const envContent = `# Razorpay Configuration
# Generated by setup script on ${new Date().toISOString()}

# ${keyId.startsWith('rzp_test_') ? 'Test' : 'Live'} credentials
NEXT_PUBLIC_RAZORPAY_KEY_ID=${keyId}
RAZORPAY_KEY_SECRET=${keySecret}

# Firebase Configuration (if needed)
# Add your Firebase configuration here if not already configured elsewhere
`;

  // Write to .env.local
  const envPath = path.join(process.cwd(), '.env.local');
  
  try {
    fs.writeFileSync(envPath, envContent);
    console.log('\n✅ Configuration saved to .env.local');
  } catch (error) {
    console.log('\n❌ Failed to write .env.local file:', error.message);
    rl.close();
    return;
  }
  
  console.log('\n🧪 Testing configuration...');
  
  // Test the configuration
  try {
    require('dotenv').config({ path: '.env.local' });
    const Razorpay = require('razorpay');
    
    const razorpay = new Razorpay({
      key_id: keyId,
      key_secret: keySecret,
    });
    
    // Test order creation
    const testOrder = await razorpay.orders.create({
      amount: 100, // ₹1 in paise
      currency: 'INR',
      receipt: 'test_' + Date.now(),
    });
    
    console.log('✅ Test order created successfully!');
    console.log(`Order ID: ${testOrder.id}`);
    
  } catch (error) {
    console.log('❌ Configuration test failed:', error.message);
    
    if (error.statusCode === 401) {
      console.log('\n💡 This usually means invalid credentials.');
      console.log('Please check your Key ID and Secret and try again.');
    }
    
    rl.close();
    return;
  }
  
  console.log('\n🎉 Razorpay integration setup completed successfully!');
  console.log('\n📝 Next steps:');
  console.log('1. Start your development server: npm run dev');
  console.log('2. Navigate to the payment page in your app');
  console.log('3. Test with these card details:');
  console.log('   Card: 4111 1111 1111 1111');
  console.log('   Expiry: Any future date');
  console.log('   CVV: Any 3 digits');
  console.log('\n📚 For troubleshooting, see: TROUBLESHOOTING_RAZORPAY.md');
  
  rl.close();
}

// Handle errors
process.on('unhandledRejection', (error) => {
  console.error('\n❌ Setup failed:', error.message);
  rl.close();
});

// Run setup
setupRazorpay().catch(console.error);